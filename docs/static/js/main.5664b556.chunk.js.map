{"version":3,"sources":["views/NotFound.jsx","services/moviesApi.service.js","components/MovieList.jsx","views/MoviesCategory.jsx","views/MovieDetail.jsx","components/Navigation.jsx","App.js","serviceWorker.js","index.js"],"names":["NotFound","className","this","APIKEY","callsDone","category","page","axios","get","data","id","Meta","Card","Grid","styled","div","Img","img","MovieList","movies","console","log","map","movie","to","key","hoverable","bordered","bodyStyle","background","color","cover","src","poster_path","title","description","release_date","Wrapper","MoviesCategory","p","state","currentCategory","loading","error","componentDidMount","getMovies","componentDidUpdate","props","match","params","categoryName","setState","apiService","getMoviesByCategory","results","style","maxWidth","message","type","showIcon","display","justifyContent","padding","size","React","Component","Title","Typography","Paragraph","MovieData","backdrop_path","MovieDetail","getMovie","currentMovieId","getMovieById","level","original_title","production_companies","comp","logo_path","marginRight","shape","allowHalf","disabled","defaultValue","Math","round","vote_average","homepage","href","tagline","overview","withRouter","location","pathname","split","filter","item","subtitle","ghost","onBack","history","goBack","subTitle","replace","extra","activeClassName","App","path","exact","component","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5664b556.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction NotFound () {\n    return (\n      <div className='NotFound'>\n        <h1>NOT FOUND</h1>\n        <h1>404</h1>\n      </div>\n    );\n}\n\nexport default NotFound;","import axios from 'axios';\n\nclass ApiService {\n  constructor() {\n    this.APIKEY = '323112ea2281b9eb70f319f4df422c6b';\n    this.callsDone = 0;\n  }\n\n  async getMoviesByCategory(category, page = 1) {\n    this.callsDone++;\n\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${category}?api_key=${this.APIKEY}&language=es-ES&page=${page}`,\n    );\n    return data;\n  }\n\n  async getMovieById(id) {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${this.APIKEY}&language=es-ES`,\n    );\n    return data;\n  }\n\n  howManyCalls() {\n    return this.callsDone;\n  }\n}\n\nexport default new ApiService();\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Card } from 'antd';\nimport {Link} from 'react-router-dom';\nconst { Meta } = Card;\n\nconst Grid = styled.div`\n    display:grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    grid-gap: 0.6em;\n    * {\n        color:white;\n    }\n`\n\nconst Img = styled.img`\n  max-height: 200px;\n  overflow: hidden;\n  object-fit: cover;\n`;\n\n\nfunction MovieList({movies}) {\n    console.log(movies);\n\n    return (\n      <Grid className='MovieList'>\n        {movies.map(movie => (\n          <Link  to={'/movie/' + movie.id}>\n            <Card\n              key={movie.id}\n              hoverable\n              bordered={false}\n              bodyStyle={{\n                background: '#222',\n                color: 'white',\n              }}\n              cover={\n                <Img\n                  src={`https://image.tmdb.org/t/p/w300/${movie.poster_path}`}\n                />\n              }\n            >\n              <Meta title={movie.title} description={movie.release_date} />\n            </Card>\n          </Link>\n        ))}\n      </Grid>\n    );\n}\n\nexport default MovieList","import React from 'react';\nimport apiService from '../services/moviesApi.service';\nimport { Spin, Alert } from 'antd';\nimport styled from 'styled-components';\nimport MovieList from '../components/MovieList';\n\nconst Wrapper = styled.div`\n  padding: 1em;\n`;\n\nclass MoviesCategory extends React.Component {\n  state = {\n    movies: [],\n    currentCategory: '',\n    loading: false,\n    error: false,\n  };\n  constructor(p) {\n    super(p);\n    this.componentDidMount = this.getMovies;\n    this.componentDidUpdate = this.getMovies;\n  }\n\n  async getMovies() {\n    const currentCategory = this.props.match.params.categoryName;\n    if (currentCategory !== this.state.currentCategory && !this.state.loading) {\n      this.setState({ loading: true, error: false });\n      try {\n        const data = await apiService.getMoviesByCategory(currentCategory);\n        this.setState({\n          movies: data.results,\n          currentCategory,\n          loading: false,\n          error: false,\n        });\n      } catch {\n        this.setState({\n          loading: false,\n          currentCategory,\n          error: 'Fail fetching movies',\n        });\n      }\n    }\n  }\n\n  render() {\n    // console.log(this.props.match.params);\n\n    return (\n      <Wrapper className='MoviesCategory'>\n        {this.state.error && (\n          <Alert\n            style={{ maxWidth: '300px' }}\n            message={this.state.error}\n            type='error'\n            showIcon\n          />\n        )}\n        {this.state.loading ? (\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              padding: '2em',\n            }}\n          >\n            <Spin size='large' />\n          </div>\n        ) : (\n           <MovieList movies={this.state.movies}/>\n        )}\n      </Wrapper>\n    );\n  }\n}\n\nexport default MoviesCategory;\n","import React from 'react';\nimport apiService from '../services/moviesApi.service';\nimport { Spin, Alert, Avatar, Typography, Rate } from 'antd';\nimport styled from 'styled-components';\n\nconst { Title, Paragraph } = Typography;\n\n\n\n\nconst Wrapper = styled.div`\n`;\n\nconst MovieData = styled.div`\npadding: 1em;\nposition:relative;\n\ncolor:white;\n\n::before {\n  content: \"\";\n  position: absolute;\n  top: 0; left: 0;\n  width: 100%; height: 100%;\n  background-image:\n   url('https://image.tmdb.org/t/p/original/${props =>\n     props.movie.backdrop_path}');\n  background-size:cover;\n  filter: brightness(20%);\n  z-index:0;\n}\n& > * {\nposition:relative;\n\n   z-index:1;\n}\n\n\n`;\n\nclass MovieDetail extends React.Component {\n  state = {\n    movie: null,\n    loading: false,\n    error: false,\n  };\n  constructor(p) {\n    super(p);\n    this.componentDidMount = this.getMovie;\n    this.componentDidUpdate = this.getMovie;\n  }\n\n  async getMovie() {\n    const currentMovieId = this.props.match.params.id;\n    if (currentMovieId !== this.state.currentMovieId && !this.state.loading) {\n      this.setState({ loading: true, error: false });\n      try {\n        const data = await apiService.getMovieById(currentMovieId);\n        console.log(data);\n\n        this.setState({\n          movie: data,\n          currentMovieId,\n          loading: false,\n          error: false,\n        });\n      } catch {\n        this.setState({\n          loading: false,\n          currentMovieId,\n          error: 'Fail fetching movie',\n        });\n      }\n    }\n  }\n\n  render() {\n    // console.log(this.props.match.params);\n    const {loading, movie, error} = this.state;\n\n    return (\n      <Wrapper className='MovieDetail'>\n        {error && (\n          <Alert\n            style={{ maxWidth: '300px' }}\n            message={error}\n            type='error'\n            showIcon\n          />\n        )}\n\n        {loading && (\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              padding: '2em',\n            }}\n          >\n            <Spin size='large' />\n          </div>\n        )}\n\n        {movie && (\n          <MovieData movie={movie}>\n            <Title>\n              {movie.title} {movie.release_date}\n            </Title>\n            <Title level={3}>{movie.original_title}</Title>\n            {movie.production_companies.map(\n              comp =>\n                comp.logo_path && (\n                  <Avatar\n                    size={44}\n                    style={{ background: 'white', marginRight: 10 }}\n                    shape='square'\n                    src={'https://image.tmdb.org/t/p/w200/' + comp.logo_path }\n                  ></Avatar>\n                ),\n            )}\n            <div style={{ color: 'yellow' }}>\n              <Rate\n                allowHalf\n                disabled\n                defaultValue={Math.round(movie.vote_average) / 2}\n              />\n            </div>\n            <div>\n              {movie.homepage && <a href={movie.homepage}>{movie.homepage}</a>}\n            </div>\n            <Paragraph>{movie.tagline}</Paragraph>\n\n            <Paragraph>{movie.overview}</Paragraph>\n            {/* <pre>{JSON.stringify(movie, null, 2)}</pre> */}\n          </MovieData>\n        )}\n      </Wrapper>\n    );\n  }\n}\n\nexport default MovieDetail;\n","import React from 'react';\nimport { PageHeader, Button } from 'antd';\nimport styled from 'styled-components';\nimport { NavLink, withRouter } from 'react-router-dom';\n\n\nconst Wrapper = styled.div`\n    color: black;\n    .active button {\n        background:black;\n        color:white;\n    }\n    a.active {\n      color:white;\n    }\n`\n\nfunction Navigation(props) {\n  const path = props.location.pathname;\n  const [title = '', subtitle = ''] = path.split('/').filter(item => !!item);\n\n  return (\n    <Wrapper className='Navigation'>\n      <PageHeader\n        ghost={false}\n        onBack={() => props.history.goBack()}\n        title={title}\n        subTitle={subtitle.replace('_', ' ')}\n        extra={[\n          <NavLink key='3' to='/category/top_rated' activeClassName='active'>\n            <Button>Top rated</Button>\n          </NavLink>,\n          <NavLink key='2' to='/category/upcoming' activeClassName='active'>\n            <Button>Upcoming</Button>\n          </NavLink>,\n          <NavLink key='1' to='/category/popular' activeClassName='active'>\n            <Button>Popular</Button>\n          </NavLink>,\n        ]}\n      ></PageHeader>\n    </Wrapper>\n  );\n}\n\nexport default withRouter(Navigation);\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport NotFound from './views/NotFound';\nimport MoviesCategory from './views/MoviesCategory';\nimport MovieDetail from './views/MovieDetail';\nimport Navigation from './components/Navigation';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <BrowserRouter>\n        <Navigation />\n\n        <Switch>\n          <Route\n            path='/category/:categoryName'\n            exact\n            component={MoviesCategory}\n          />\n          <Route path='/movie/:id' exact component={MovieDetail} />\n          <Redirect path='/' exact to='category/upcoming' />\n          <Route component={NotFound} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}